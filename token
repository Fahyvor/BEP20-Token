// SPDX-License_Identifier: MIT
pragma solidity ^0.8.7;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

interface IBEP20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (uint256);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender, uint256 amount) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(
        address owner,
        address delegate,
        uint256 amount)
        external returns (uint256);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

    interface IBEP20Metadata is IBEP20{


	    function name() external view returns (string memory);

	    function symbol() external view returns (string memory);

	    function decimals() external view returns (uint256);
	}


    contract BEP20 is Context, IBEP20Metadata, Ownable{

        string public override name;
        string public override symbol;
        uint256 public override totalSupply;
        uint256 public override decimals;
       
    mapping(address => uint256) public balances;

    mapping(address => mapping(address => uint256)) public allowances;


    constructor (string memory _name, string memory _symbol, uint256 _totalSupply, uint256 _decimals) {
        balances[msg.sender] = _totalSupply;
        name = _name;
        symbol = _symbol;
        totalSupply = _totalSupply;
        decimals = _decimals;
    }


    function balanceOf(address owner) public view override returns (uint256) {
        return balances[owner];
    }

    function transfer(address receipient, uint256 amount) public override returns (uint256) {
        require(amount <= balances[msg.sender], "Insufficient Balance");
        balances[msg.sender] -= amount;
        balances[receipient] += amount;
        emit Transfer(msg.sender, receipient, amount);
        return amount;
    }

    function allowance(
        address owner,
        address spender,
        uint256 amount)
        external view override returns (uint256) {
        return amount;
    }

    function approve(address owner, address delegate, uint256 value) public override returns (uint256) {
        require(owner != address(0), "Inappropriate Transaction");
        require(delegate != address(0), "Inappropriate Transaction");
        allowances[msg.sender][delegate] += value;
        emit Approval(msg.sender, delegate, value);
        return value;
    }

    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual returns (uint256) {
        uint256 currentAllowance = allowances[owner][spender];
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: Insufficient Allowance");
            unchecked {
                approve(owner, spender, currentAllowance - amount);
            }
        }
        return amount;
    }

    function Sell(address buyer, uint256 amount) public payable {
       require(amount <= balances[msg.sender], "Error, Not enough balance");
        balances[msg.sender] -= amount;
        balances[buyer] += amount;
    }

    function buyToken(address buyer, uint256 amount) external payable {
        require(buyer != msg.sender);
        amount = msg.value;
        balances[buyer] += amount;

    }

    function transferOwnership(address newOwner) public virtual override onlyOwner {
        require(address(0) != newOwner, "Tokens cannot be sent to self");
        _transferOwnership(newOwner);
        balances[newOwner] = totalSupply;
    }
  
    function transferFrom(address owner, address buyer, uint256 amount) public override returns (bool) {
        require(amount <= balances[msg.sender]);
        require(amount <= allowances[msg.sender][owner]);

        balances[msg.sender] -= amount;
        allowances[msg.sender][owner] -= amount;
        balances[buyer] += amount;
        emit Transfer(owner, buyer, amount);
        return true;
    }

    function increaseAllowance (address spender, uint256 amount) public virtual returns (bool) {
        address owner = msg.sender;
        uint256 currentAllowance = allowances[owner][spender];
        currentAllowance += amount;

        approve(owner, spender, amount);

        return true;
    }

    function decreaseAllowance(address spender,  uint256 amount) public virtual returns (bool) {
        address owner = msg.sender;
        uint256 currentAllowance = allowances[owner][spender];
        require(currentAllowance >= amount, "ERC20 decreased allowance below zero");
        currentAllowance -= amount;

        approve(owner, spender, currentAllowance);

        return true;
    }

    function mint(address account, uint256 amount) public onlyOwner {
        require(account != address(0), "ERC: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);
       
        totalSupply += amount;
        balances[account] += amount;

        emit Transfer(address(0), account, amount);
        
        _afterTokenTransfer(address(0), account, amount);
    }

    function burn(address account, uint256 amount) internal{
        require(account != address(0), "Token: Burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        require(balances[account] >= amount, "Token: Burn amount exceeds limit");

        balances[account] -= amount;
        totalSupply -= amount;

        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    function withdraw (address payable owner, uint256 value) public onlyOwner payable returns (uint256) {
        require(msg.sender == owner, "Only owner can call withdraw");
        require(msg.value <= value, "Insufficient Funds");

        owner.transfer(value);
        balances[owner] += value;
        return value; 
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual{}

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
    
    }
